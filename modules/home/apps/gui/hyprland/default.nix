{
  inputs,
  config,
  pkgs,
  lib,
  ...
}:
let
  inherit (lib) mkIf;
  inherit (lib.mine) mkEnable;
  cfg = config.mine.${name};
  name = "hyprland";

  # for some reason pipes don't work
  screenshot = pkgs.writeShellScript "myhyprshot" (
    with lib;
    with pkgs;
    ''
      selection=$(${getExe slurp} -o)

      tempfile=$(mktemp /tmp/screenshot-XXXXXX.png)
      ${getExe wayshot} -s "$selection" --file "$tempfile"

      cat "$tempfile" | ${getExe' wl-clipboard "wl-copy"} --type image/png

      ${getExe satty} --filename "$tempfile" --fullscreen --initial-tool line

      rm "$tempfile"
    ''
  );
in
{
  options.mine.${name} = mkEnable config {
    tags = [
      "gui"
      "window-manager"
    ];
  };

  config = mkIf cfg.enable {
    home.packages = with pkgs; [
      bibata-cursors
      xsel
      xclip
      wl-clipboard
    ];
    # programs.hyprlock = {
    #   enable = true;
    #   settings = {
    #     background = {
    #       monitor = "";
    #       path = "${inputs.self}/resources/wallpapers/wallhaven-car-swamp.png";
    #
    #     };
    #     general = {
    #       hide_cursor = true;
    #     };
    #   };
    # };

    wayland.windowManager.hyprland = {
      enable = true;
      systemd = {
        enable = true;
        variables = [ "--all" ];
      };
      settings = {
        autogenerated = 0;
        ################
        ### MONITORS ###
        ################

        # See https://wiki.hyprland.org/Configuring/Monitors/
        monitor = [
          ", preferred, auto, auto"
          "eDP-1, 1920x1200@60, 1920x0, 1.00"
          "HDMI-A-1, 1920x1080@60, 0x0, 1.00"
        ];

        ###################
        ### MY PROGRAMS ###
        ###################

        # See https://wiki.hyprland.org/Configuring/Keywords/

        # "$terminal" = lib.getExe' pkgs.wezterm "wezterm";
        "$terminal" = lib.getExe pkgs.ghostty;
        "$fileManager" = lib.getExe' pkgs.kdePackages.dolphin "dolphin";
        "$menu" = "anyrun";
        "$browser" = lib.getExe pkgs.floorp;

        #################
        ### AUTOSTART ###
        #################

        # Autostart necessary processes (like notifications daemons, status bars, etc.)
        # Or execute your favorite apps at launch like this:

        # exec-once = "$terminal";
        # exec-once = nm-applet &
        # exec-once = waybar & hyprpaper & firefox
        exec-once = [
          ''${pkgs.dbus}/bin/dbus-update-activation-environment --systemd --all''
          "systemctl --user import-environment; systemctl --user start graphical-session.target"

          "[workspace 1 silent] $terminal"
          "[workspace 2 silent] $browser"
          "[workspace 3 silent] ${lib.getExe pkgs.ayugram-desktop}"
          "[workspace 4 silent] sudo -E ${lib.getExe pkgs.hiddify-app}"
          "[workspace 5 silent] ${lib.getExe pkgs.youtube-music}; sleep 1; pkill youtube-music; ${lib.getExe pkgs.youtube-music}"

          "${lib.getExe' pkgs.swww "swww-daemon"}"
          "${lib.getExe pkgs.wl-clip-persist} --clipboard both"
          "QT_QPA_PLATFORM=xcb ${lib.getExe' pkgs.kdePackages.kdeconnect-kde "kdeconnectd"}"
          "${lib.getExe pkgs.clipse} -listen"

          ''hyprctl setcursor "Bibata-Modern-Ice" 22''
          ''${lib.getExe' pkgs.systemd "systemctl"} --user reload-or-restart kanshi.service''
        ];

        exec = [
          "${lib.getExe pkgs.swww} img ${inputs.self}/resources/wallpapers/wallhaven-fields-858z32.png -t none"
        ];

        #############################
        ### ENVIRONMENT VARIABLES ###
        #############################

        # See https://wiki.hyprland.org/Configuring/Environment-variables/

        env = [
          "XCURSOR_SIZE,24"
          "HYPRCURSOR_SIZE,24"
          "GDK_BACKEND,wayland"
        ];

        #####################
        ### LOOK AND FEEL ###
        #####################

        # Refer to https://wiki.hyprland.org/Configuring/Variables/

        # https://wiki.hyprland.org/Configuring/Variables/#general
        general = {
          gaps_in = "5";
          gaps_out = "10";

          border_size = "2";

          # https://wiki.hyprland.org/Configuring/Variables/#variable-types for info about colors
          "col.active_border" = "rgba(33ccffee) rgba(00ff99ee) 45deg";
          "col.inactive_border" = "rgba(595959aa)";

          # Set to true enable resizing windows by clicking and dragging on borders and gaps
          resize_on_border = true;

          # Please see https://wiki.hyprland.org/Configuring/Tearing/ before you turn this on
          allow_tearing = false;

          layout = "dwindle";
        };

        # https://wiki.hyprland.org/Configuring/Variables/#decoration
        decoration = {
          rounding = 10;

          # Change transparency of focused and unfocused windows
          active_opacity = 1.0;
          inactive_opacity = 1.0;

          shadow = {
            enabled = true;
            range = 4;
            render_power = 3;
            color = "rgba(1a1a1aee)";
          };

          # https://wiki.hyprland.org/Configuring/Variables/#blur
          blur = {
            enabled = true;
            size = 3;
            passes = 1;

            vibrancy = "0.1696";
          };
        };

        # https://wiki.hyprland.org/Configuring/Variables/#animations
        animations = {
          enabled = true;

          # Default animations, see https://wiki.hyprland.org/Configuring/Animations/ for more

          bezier = "myBezier, 0.05, 0.9, 0.1, 1.05";

          animation = [
            "windows, 1, 7, myBezier"
            "windowsOut, 1, 7, default, popin 80%"
            "border, 1, 10, default"
            "borderangle, 1, 8, default"
            "fade, 1, 7, default"
            "workspaces, 0, 2, default"
          ];
        };

        # See https://wiki.hyprland.org/Configuring/Dwindle-Layout/ for more
        dwindle = {
          pseudotile = true; # Master switch for pseudotiling. Enabling is bound to mainMod + P in the keybinds section below
          preserve_split = true; # You probably want this
        };

        # See https://wiki.hyprland.org/Configuring/Master-Layout/ for more
        master = {
          new_status = "master";
        };

        # https://wiki.hyprland.org/Configuring/Variables/#misc
        misc = {
          force_default_wallpaper = -1; # Set to 0 or 1 to disable the anime mascot wallpapers
          disable_hyprland_logo = true; # If true disables the random hyprland logo / anime girl background. :(
        };

        #############
        ### INPUT ###
        #############

        # https://wiki.hyprland.org/Configuring/Variables/#input
        input = {
          kb_layout = "us,ir";
          kb_variant = "";
          # kb_model = "logitech_base";
          kb_options = "caps:escape,grp:alt_shift_toggle";
          # kb_rules = "";

          follow_mouse = 1;

          sensitivity = 0; # -1.0 - 1.0, 0 means no modification.
          repeat_delay = 300;

          touchpad = {
            natural_scroll = false;
          };
        };

        # https://wiki.hyprland.org/Configuring/Variables/#gestures
        gestures = {
          workspace_swipe = true;
          workspace_swipe_invert = false;
          workspace_swipe_distance = 150;
          workspace_swipe_forever = true;
        };

        xwayland.force_zero_scaling = true;

        binds = {
          workspace_back_and_forth = true;
        };

        cursor = {
          hide_on_key_press = true;
          inactive_timeout = 3;
        };

        # Example per-device config
        # See https://wiki.hyprland.org/Configuring/Keywords/#per-device-input-configs for more

        ####################
        ### KEYBINDINGSS ###
        ####################

        # See https://wiki.hyprland.org/Configuring/Keywords/
        "$mainMod" = "SUPER"; # Sets "Windows" key as main modifier

        # Example binds, see https://wiki.hyprland.org/Configuring/Binds/ for more
        # l -> locked, will also work when an input inhibitor (e.g. a lockscreen) is active.
        # r -> release, will trigger on release of a key.
        # e -> repeat, will repeat when held.
        # n -> non-consuming, key/mouse events will be passed to the active window in addition to triggering the dispatcher.
        # m -> mouse, see below.
        # t -> transparent, cannot be shadowed by other binds.
        # i -> ignore mods, will ignore modifiers.
        # s -> separate, will arbitrarily combine keys between each mod/key, see [Keysym combos](#keysym-combos) above.
        # d -> has description, will allow you to write a description for your bind.
        # p -> bypasses the app's requests to inhibit keybinds.
        bind =
          with pkgs;
          with lib;
          [
            "$mainMod, RETURN, exec, $terminal"
            "$mainMod, Q, killactive,"
            "$mainMod, M, exit,"
            "$mainMod, E, exec, $fileManager"
            "$mainMod, V, togglefloating,"
            "$mainMod, D, exec, $menu"
            "$mainMod, P, pseudo, # dwindle"
            # "$mainMod, J, togglesplit, # dwindle"

            # Move focus with mainMod + arrow keys
            "$mainMod, left, movefocus, l"
            "$mainMod, right, movefocus, r"
            "$mainMod, up, movefocus, u"
            "$mainMod, down, movefocus, d"

            "$mainMod, h, movefocus, l"
            "$mainMod, l, movefocus, r"
            "$mainMod, k, movefocus, u"
            "$mainMod, j, movefocus, d"

            # Switch workspaces with mainMod + [0-9]
            "$mainMod, 1, workspace, 1"
            "$mainMod, 2, workspace, 2"
            "$mainMod, 3, workspace, 3"
            "$mainMod, 4, workspace, 4"
            "$mainMod, 5, workspace, 5"
            "$mainMod, 6, workspace, 6"
            "$mainMod, 7, workspace, 7"
            "$mainMod, 8, workspace, 8"
            "$mainMod, 9, workspace, 9"
            "$mainMod, 0, workspace, 10"

            # Move active window to a workspace with mainMod + SHIFT + [0-9]
            "$mainMod SHIFT, 1, movetoworkspace, 1"
            "$mainMod SHIFT, 2, movetoworkspace, 2"
            "$mainMod SHIFT, 3, movetoworkspace, 3"
            "$mainMod SHIFT, 4, movetoworkspace, 4"
            "$mainMod SHIFT, 5, movetoworkspace, 5"
            "$mainMod SHIFT, 6, movetoworkspace, 6"
            "$mainMod SHIFT, 7, movetoworkspace, 7"
            "$mainMod SHIFT, 8, movetoworkspace, 8"
            "$mainMod SHIFT, 9, movetoworkspace, 9"
            "$mainMod SHIFT, 0, movetoworkspace, 10"

            # Example special workspace (scratchpad)
            "$mainMod, S, togglespecialworkspace, magic"
            "$mainMod SHIFT, S, movetoworkspace, special:magic"

            # Scroll through existing workspaces with mainMod + scroll
            "$mainMod, mouse_down, workspace, e+1"
            "$mainMod, mouse_up, workspace, e-1"

            # ", Print, exec, $terminal -e '${getExe wayshot} -s $(${getExe slurp} -o) --stdout | ${getExe satty} --filename - --fullscreen --initial-tool line'"
            # TODO: switch to watershot?
            ", Print, exec, ${screenshot}"
            ", Insert, exec, ${getExe wayshot} --stdout | ${getExe satty} --filename - --fullscreen --initial-tool brush"
            # "$mainMod, Y, exec, ${getExe cliphist} list | ${getExe wofi} --show dmenu | ${getExe cliphist} decode | ${getExe' wl-clipboard "wl-copy"}"
            "$mainMod, Y, exec, $terminal --class=\"clipse\" -e '${lib.getExe pkgs.clipse}'"
            "$mainMod SHIFT, Z, exec, ${getExe wlogout}"
            "$mainMod SHIFT, n, exec, ${getExe' swaynotificationcenter "swaync-client"} --toggle-panel --skip-wait"
            "$mainMod, period, exec, ${getExe' swaynotificationcenter "swaync-client"} --hide-latest"

            # Special audio keys (piped into wob, using pipewire)

            "$mainMod, F, fullscreen"
            "$mainMod, z, exec, swaylock"

            "$SUPERCTRL, h, movecurrentworkspacetomonitor, l"
            "$SUPERCTRL, l, movecurrentworkspacetomonitor, r"

            # ''$mainMod, r, exec, ${getExe wl-screenrec} -g "$(${getExe slurp})" -f ~/Documents/screen_record.mp4''
            # "$mainMod SHIFT, r, exec, ${getExe wl-screenrec} -f ~/Documents/screen_record.mp4"
          ];

        bindl =
          with pkgs;
          with lib;
          [
            ", XF86AudioMute, exec, wpctl set-mute @DEFAULT_AUDIO_SINK@ toggle"
            ", XF86AudioPlay, exec, ${getExe playerctl} play-pause"
            ", XF86AudioNext, exec, ${getExe playerctl} next"
            ", XF86AudioPrev, exec, ${getExe playerctl} previous"

          ];

        binde =
          with pkgs;
          with lib;
          [
            # volume
            ", XF86AudioRaiseVolume, exec, wpctl set-volume --limit 2 @DEFAULT_AUDIO_SINK@ 2%+"
            ", XF86AudioLowerVolume, exec, wpctl set-volume @DEFAULT_AUDIO_SINK@ 2%-"
            # light
            '', XF86MonBrightnessUp, exec, ${getExe light} -A 1''
            '', XF86MonBrightnessDown, exec, ${getExe light} -U 1''

            # gaps
            "ALT, bracketleft  , exec, sh ${./gaps.sh} --inc_gaps_in"
            "ALT, bracketright , exec, sh ${./gaps.sh} --dec_gaps_in"
            "ALT, equal        , exec, sh ${./gaps.sh} --inc_gaps_out"
            "ALT, minus        , exec, sh ${./gaps.sh} --dec_gaps_out"

            "$mainMod SHIFT, l, movewindow, r"
            "$mainMod SHIFT, h, movewindow, l"
            "$mainMod SHIFT, k, movewindow, u"
            "$mainMod SHIFT, j, movewindow, d"

            "$mainMod ALT, l, resizeactive, 10 0"
            "$mainMod ALT, h, resizeactive, -10 0"
            "$mainMod ALT, k, resizeactive, 0 -10"
            "$mainMod ALT, j, resizeactive, 0 10"
          ];

        # Move/resize windows with mainMod + LMB/RMB and dragging
        bindm = [
          "$mainMod, mouse:272, movewindow"
          "$mainMod, mouse:273, resizewindow"
        ];

        ##############################
        ### WINDOWS AND WORKSPACES ###
        ##############################

        # See https://wiki.hyprland.org/Configuring/Window-Rules/ for more
        # See https://wiki.hyprland.org/Configuring/Workspace-Rules/ for workspace rules

        # Example windowrule v1
        # windowrule = float, ^(kitty)$

        # Example windowrule v2
        # windowrulev2 = float,class:^(kitty)$,title:^(kitty)$
        windowrule = [
          "nofocus,org.kde.kdeconnect.daemon"
          "float,org.kde.kdeconnect.daemon"
        ];

        workspace = [
          "w[t1], gapsout:0, gapsin:0"
          "w[tg1], gapsout:0, gapsin:0"
          "f[1], gapsout:0, gapsin:0"
        ];

        windowrulev2 = [
          "suppressevent maximize, class:.*" # You'll probably like this.
          "float,class:^(org.telegram.desktop|telegramdesktop)$,title:^(Media viewer)$"
          "noanim,class:^(org.telegram.desktop|telegramdesktop)$,title:^(Media viewer)$"

          "float,class:^(com.ayugram.desktop|ayugramdesktop)$,title:^(Media viewer)$"
          "noanim,class:^(com.ayugram.desktop|ayugramdesktop)$,title:^(Media viewer)$"

          "noinitialfocus,class:^(nannou)$"
          "noanim,class:^(nannou)$"
          "float,class:^(nannou)$"
          "move 100%-w-20 0%-w-20,class:^(nannou)$"

          "noanim, class:^(Godot)$"
          "tile, class:^(Godot)$, initialTitle:^(Godot)$"

          "float,class:(clipse)"
          "float,class:(floatingAppFocus)"
          "noanim,class:^(clipse|floatingAppFocus)$"
          "size 622 652,class:(clipse)"

          "nofocus,class:(org.kde.kdeconnect.daemon)"
          "float,class:(org.kde.kdeconnect.daemon)"
          "noanim,class:(org.kde.kdeconnect.daemon)"
          "noblur,class:(org.kde.kdeconnect.daemon)"
          "fullscreenstate 0 1, class:(org.kde.kdeconnect.daemon)"
          "nomaxsize, class:(org.kde.kdeconnect.daemon)"
          "pin, class:(org.kde.kdeconnect.daemon)"
          "size 100% 100%, class:(org.kde.kdeconnect.daemon)"

          "bordersize 0, floating:0, onworkspace:w[t1]"
          "rounding 0, floating:0, onworkspace:w[t1]"
          "bordersize 0, floating:0, onworkspace:w[tg1]"
          "rounding 0, floating:0, onworkspace:w[tg1]"
          "bordersize 0, floating:0, onworkspace:f[1]"
          "rounding 0, floating:0, onworkspace:f[1]"
        ];
      };
    };
  };
}
